Product Lines of Theorems by Delaware et al., OOPSLA'11
=======================================================

The paper attackes the problem of language meatatheory extension,
along with the corresponding formalization in a proof assistant (Coq
or a similar one) and changing the corresponding type safety proofs
(i.e., progress and preservation theorems), from the perspecttive of
Software Product Lines (SPL). That is, it starts from formalizing a core
language, taking a "core" Featherweight Java (cFJ), and considering
all further extensions to the language (casts, interfaces, generics)
as features.

What is inherent for the SPL approach is reasoning about composition
and possible interaction between features, expressed by means of an
algebra of feature operators: $\cdot$, $\#$, and $\times$. Introducing
multiple features can lead to an exponential explosion of pairwise
intercation, which, however, is rarely observed in practice, as most
of the features are mutually independent.

In order to enable feature-based decomposition of a language, all its
components (syntax, dynamic semantics, safety proofs etc.) are written
is specific languages, amenable for feature compostions. For instance,
the language syntax and its semantic/typing rules can be extended by
introducing the mechanism of \emph{variation points} (VPs) into the
corresponding grammar productions, premises and conluisions, of the
rules, reusing the intuition of SPL design.

On the implementation side, the modularity of extensions is achieved
by means of reusing Coq's capabilities for higher-order
parametrization: language component definitions are parameterized by
the corresponding variation point contexts. The crux of the technique
is identifying the effect of the VPs to the safety proofs, which are
conducted in a way, parametric with respect to the inductive cases to
be considered. For each specific combination of the features, the
top-level proof dispatches to the proofs from the corresponding
feature module.

The shortcoming of the approach is the requirement, for a core
language, to have a significant foresight when identifying the
appropriate VPs, which provide the opportunity for feature extensions.
While the paper demonstrates how to do it in the context of a
language, whose safety is forwalized via the syntactic approach, it
provides little guidance with respect to other ways of stating type
soundness (e.g., via logical relations), neither does it consider
other domains beyond PL design. Overall, the approach seems to be a
bit ad-hoc, which is why futher advances in this direction lead to the
creation of Modular Monadic Meta-theory (to be continued...).

